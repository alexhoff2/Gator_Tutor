<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Messages - GatorTutor</title>
    <link rel="stylesheet" href="/css/tailwind.css" />
    <link rel="stylesheet" href="/css/custom.css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/flowbite@1.5.3/dist/flowbite.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
</head>
<body class="flex flex-col min-h-full">
    <%- include('partials/header') %>
    
    <div class="flex-grow">
        <main class="container max-w-4xl p-4 mx-auto mt-20">
            <h1 class="mb-6 text-3xl font-bold">Your Conversations</h1>
            
            <% if (messages.length === 0) { %>
                <p class="text-gray-600">You have no messages.</p>
            <% } else { %>
                <%
                    const conversations = messages.reduce((acc, message) => {
                        const otherUser = message.sender_id === user.id ? message.recipient_name : message.sender_name;
                        const otherUserId = message.sender_id === user.id ? message.recipient_id : message.sender_id;
                        if (!acc[otherUserId]) {
                            acc[otherUserId] = { name: otherUser, messages: [] };
                        }
                        acc[otherUserId].messages.push(message);
                        return acc;
                    }, {});
                %>
                
                <div class="space-y-8">
                    <% Object.entries(conversations).forEach(([otherUserId, conversation]) => { %>
                        <div class="p-4 bg-white rounded-lg shadow-xl">
                            <h2 class="mb-4 text-xl font-semibold text-indigo-600">Conversation with <%= conversation.name %></h2>
                            <div class="mb-4 space-y-4" id="conversation-<%= otherUserId %>">
                                <% conversation.messages.sort((a, b) => new Date(a.created_at) - new Date(b.created_at)).forEach(message => { %>
                                    <div class="p-2 <%= message.sender_id === user.id ? 'bg-blue-100 ml-auto' : 'bg-gray-100' %> rounded-lg max-w-[80%]">
                                        <p class="text-gray-700"><%= message.message %></p>
                                        <span class="text-xs text-gray-500"><%= new Date(message.created_at).toLocaleString() %></span>
                                    </div>
                                <% }) %>
                            </div>
                            <form class="flex gap-2 message-form" data-recipient-id="<%= otherUserId %>">
                                <input type="hidden" name="recipientId" value="<%= otherUserId %>">
                                <input type="text" name="message" placeholder="Type your message..." required
                                       class="flex-grow p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500">
                                <button type="submit" class="px-4 py-2 text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                                    Send
                                </button>
                            </form>
                        </div>
                    <% }) %>
                </div>
            <% } %>
        </main>
    </div>

    <%- include('partials/footer') %>
    <%- include('partials/scripts') %>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const messageForms = document.querySelectorAll('.message-form');

        messageForms.forEach(form => {
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(form);
                const recipientId = form.dataset.recipientId;

                try {
                    const response = await fetch('/messages/send', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(Object.fromEntries(formData)),
                    });

                    if (response.ok) {
                        const result = await response.json();
                        const conversationDiv = document.getElementById(`conversation-${recipientId}`);
                        const newMessageDiv = document.createElement('div');
                        newMessageDiv.className = 'p-2 bg-blue-100 ml-auto rounded-lg max-w-[80%]';
                        newMessageDiv.innerHTML = `
                            <p class="text-gray-700">${result.message}</p>
                            <span class="text-xs text-gray-500">${new Date().toLocaleString()}</span>
                        `;
                        conversationDiv.appendChild(newMessageDiv);
                        form.reset();
                    } else {
                        const error = await response.json();
                        alert(`Error: ${error.message}`);
                    }
                } catch (error) {
                    console.error('Error sending message:', error);
                    alert('An error occurred while sending the message. Please try again.');
                }
            });
        });
    });
    </script>
</body>
</html>